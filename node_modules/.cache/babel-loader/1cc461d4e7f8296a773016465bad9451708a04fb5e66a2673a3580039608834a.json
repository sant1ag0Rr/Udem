{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Downloads\\\\ProyectoIngenieria\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check for stored user data on mount\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      // Mock API call - replace with actual API endpoint\n      const response = await new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            data: {\n              user: {\n                id: 1,\n                email: credentials.email,\n                role: credentials.email.includes('admin') ? 'admin' : 'student',\n                name: 'Usuario Demo'\n              },\n              token: 'mock-jwt-token'\n            }\n          });\n        }, 1000);\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n      setUser(user);\n\n      // Redirect based on role\n      if (user.role === 'admin') {\n        navigate('/admin');\n      } else {\n        navigate('/portal');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    setUser(null);\n    navigate('/');\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"lk6viekuCMMpYORkLYLEq0Wsfds=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","navigate","storedUser","localStorage","getItem","JSON","parse","login","credentials","response","Promise","resolve","setTimeout","data","id","email","role","includes","name","token","setItem","stringify","success","error","message","logout","removeItem","value","isAuthenticated","isAdmin","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Downloads/ProyectoIngenieria/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check for stored user data on mount\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      // Mock API call - replace with actual API endpoint\r\n      const response = await new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            data: {\r\n              user: {\r\n                id: 1,\r\n                email: credentials.email,\r\n                role: credentials.email.includes('admin') ? 'admin' : 'student',\r\n                name: 'Usuario Demo'\r\n              },\r\n              token: 'mock-jwt-token'\r\n            }\r\n          });\r\n        }, 1000);\r\n      });\r\n\r\n      const { user, token } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      setUser(user);\r\n\r\n      // Redirect based on role\r\n      if (user.role === 'admin') {\r\n        navigate('/admin');\r\n      } else {\r\n        navigate('/portal');\r\n      }\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    navigate('/');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin'\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}